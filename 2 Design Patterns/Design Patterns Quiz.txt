** Design Patterns **
In software engineering, a design pattern is a general repeatable solution to a commonly occurring problem in software design. A design pattern isn't a finished design that can be transformed directly into code. It is a description or template for how to solve a problem that can be used in many different situations.

The basic idea is to re-use well-designed and documented OO solutions instead of re-inventing the wheel.

Design patterns represent the best practices used by experienced object-oriented software developers. Design patterns are solutions to general problems that software developers faced during software development. These solutions were obtained by trial and error by numerous software developers over quite a substantial period of time.

What is Gang of Four (GOF)?
In 1994, four authors Erich Gamma, Richard Helm, Ralph Johnson and John Vlissides published a book titled Design Patterns - Elements of Reusable Object-Oriented Software which initiated the concept of Design Pattern in Software development.

These authors are collectively known as Gang of Four (GOF). According to these authors design patterns are primarily based on the following principles of object orientated design.

* Program to an interface not an implementation
* Favor object composition over inheritance

Usage of Design Pattern
Design Patterns have two main usages in software development.

Common platform for developers
Design patterns provide a standard terminology and are specific to particular scenario. For example, a singleton design pattern signifies use of single object so all developers familiar with single design pattern will make use of single object and they can tell each other that program is following a singleton pattern.

Best Practices
Design patterns have been evolved over a long period of time and they provide best solutions to certain problems faced during software development. Learning these patterns helps unexperienced developers to learn software design in an easy and faster way.

Types of Design Patterns
As per the design pattern reference book Design Patterns - Elements of Reusable Object-Oriented Software , there are 23 design patterns which can be classified in three categories: Creational, Structural and Behavioral patterns. We'll also discuss another category of design pattern: J2EE design patterns.

S.N.	Pattern & Description
1	Creational Patterns
These design patterns provide a way to create objects while hiding the creation logic, rather than instantiating objects directly using new operator. This gives program more flexibility in deciding which objects need to be created for a given use case.
2	Structural Patterns
These design patterns concern class and object composition. Concept of inheritance is used to compose interfaces and define ways to compose objects to obtain new functionalities.
3	Behavioral Patterns
These design patterns are specifically concerned with communication between objects.
4	J2EE Patterns
These design patterns are specifically concerned with the presentation tier. These patterns are identified by Sun Java Center.

Factory pattern is one of the most used design patterns in Java. This type of design pattern comes under creational pattern as this pattern provides one of the best ways to create an object.

In Factory pattern, we create object without exposing the creation logic to the client and refer to newly created object using a common interface.



* Essential Elements
Pattern Name: Describes the pattern
Problem: What is being solved, the context of the problem. When to apply the pattern
Solution: The elements that make up the design, relationships in terms of classes and objects, responsibilities and collaborations. 
Consequences: Results, benefits, and trade-offs 

* Documenting Design Patterns – Essential Information
Pattern Name: Describes the essence of the pattern in a short, but expressive, name.
Intent: Describes what the pattern does
Also Known As: List any synonyms for the pattern
Motivation: Provides an example of a problem and how the pattern solves that problem.
Applicability:Lists the situations where the pattern is applicable.
Structure: Set of diagrams of the classes and objects that depict the pattern.
Participants: Describes the classes and objects that participate in the design pattern and their responsibilities.
Collaborations: Describes how the participants collaborate to carry out their responsibilities.
Consequences: Describes the forces that exist with the pattern and the benefits, trade-offs, and the variable that is isolated by the pattern.


** Categories and Crieteria for each Category and Benefits **

* Facade 
to simplify the use of an existing system. Need to define an interface that is a subset of existing one.

* Mediator
to define an object that encapsulates how a set objects interact.
(“ An Intermediary”) 

* Adapter

---------------------------------------------------
Design Patterns
Adeel Malik -> Iterator

https://www.tutorialspoint.com/design_pattern/design_pattern_overview.htm

